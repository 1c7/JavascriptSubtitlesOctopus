diff --git a/configure.ac b/configure.ac
index 12cf2e9..609ab7c 100644
--- a/configure.ac
+++ b/configure.ac
@@ -335,33 +335,8 @@ CFLAGS="$fontconfig_save_cflags"
 #
 # Check for uuid
 #
-if test "$os_win32" != "yes"; then
-	use_pkgconfig_for_uuid=yes
-	if test -n "${UUID_LIBS}"; then
-		save_UUID_LIBS=$UUID_LIBS
-	fi
-	PKG_CHECK_MODULES([UUID], [uuid],
-			  [use_pkgconfig_for_uuid=yes],
-			  [use_pkgconfig_for_uuid=no])
-	if test "x$use_pkgconfig_for_uuid" = "xno"; then
-		AC_MSG_CHECKING([where uuid functions comes from])
-		AC_TRY_LINK([#include <uuid/uuid.h>],
-			[uuid_t a; uuid_generate(a);],
-			[AC_MSG_RESULT([builtin])
-			 UUID_CFLAGS=""
-			 UUID_LIBS=""
-			],[AC_MSG_ERROR([
-*** uuid is required. install util-linux.
-			])])
-	else
-		if test -z "${save_UUID_LIBS+x}" && test "x${UUID_LIBS}" != "x"; then
-			PKGCONFIG_REQUIRES_PRIVATELY="$PKGCONFIG_REQUIRES_PRIVATELY uuid"
-		fi
-	fi
-else
-	UUID_CFLAGS=""
-	UUID_LIBS=""
-fi
+UUID_CFLAGS=""
+UUID_LIBS=""
 AC_SUBST(UUID_CFLAGS)
 AC_SUBST(UUID_LIBS)
 
@@ -720,17 +695,18 @@ if test "$os_win32" = no && ! $have_pthread; then
 fi
 
 have_pthread=false
-if test "$os_win32" = no; then
-	AX_PTHREAD([have_pthread=true])
-fi
-if $have_pthread; then
-	LIBS="$PTHREAD_LIBS $LIBS"
-	CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
-	CC="$PTHREAD_CC"
-	AC_DEFINE(HAVE_PTHREAD, 1, [Have POSIX threads])
-fi
+#if test "$os_win32" = no; then
+#	AX_PTHREAD([have_pthread=true])
+#fi
+#if $have_pthread; then
+#	LIBS="$PTHREAD_LIBS $LIBS"
+#	CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+#	CC="$PTHREAD_CC"
+#	AC_DEFINE(HAVE_PTHREAD, 1, [Have POSIX threads])
+#fi
 AM_CONDITIONAL(HAVE_PTHREAD, $have_pthread)
-
+have_pthread=false
+AC_DEFINE(HAVE_PTHREAD, 0, [Have POSIX threads])
 
 dnl ===========================================================================
 
diff --git a/src/fccache.c b/src/fccache.c
index 667d4e7..14ac06f 100644
--- a/src/fccache.c
+++ b/src/fccache.c
@@ -36,11 +36,6 @@
 #  include <unistd.h>
 #  include <sys/mman.h>
 #endif
-#if defined(_WIN32)
-#include <sys/locking.h>
-#else
-#include <uuid/uuid.h>
-#endif
 
 #ifndef O_BINARY
 #define O_BINARY 0
@@ -54,150 +49,9 @@ FcDirCacheCreateUUID (FcChar8  *dir,
     const FcChar8 *sysroot = FcConfigGetSysRoot (config);
     FcChar8 *target;
     FcBool ret = FcTrue;
-#ifndef _WIN32
-    FcChar8 *uuidname;
-
-    if (sysroot)
-	target = FcStrBuildFilename (sysroot, dir, NULL);
-    else
-	target = FcStrdup (dir);
-    uuidname = FcStrBuildFilename (target, ".uuid", NULL);
-
-    if (!uuidname)
-    {
-	FcStrFree (target);
-	return FcFalse;
-    }
-
-    if (force || access ((const char *) uuidname, F_OK) < 0)
-    {
-	FcAtomic *atomic;
-	int fd;
-	uuid_t uuid;
-	char out[37];
-	FcBool (* hash_add) (FcHashTable *, void*, void*);
-	struct stat statb;
-	struct timeval times[2];
-
-	if (FcStat (target, &statb) != 0)
-	{
-	    ret = FcFalse;
-	    goto bail1;
-	}
-	atomic = FcAtomicCreate (uuidname);
-	if (!atomic)
-	{
-	    ret = FcFalse;
-	    goto bail1;
-	}
-	if (!FcAtomicLock (atomic))
-	{
-	    ret = FcFalse;
-	    goto bail2;
-	}
-	fd = FcOpen ((char *)FcAtomicNewFile (atomic), O_RDWR | O_CREAT, 0644);
-	if (fd == -1)
-	{
-	    ret = FcFalse;
-	    goto bail3;
-	}
-	uuid_generate_random (uuid);
-	if (force)
-	    hash_add = FcHashTableReplace;
-	else
-	    hash_add = FcHashTableAdd;
-	if (!hash_add (config->uuid_table, target, uuid))
-	{
-	    ret = FcFalse;
-	    goto bail3;
-	}
-	uuid_unparse (uuid, out);
-	if (FcDebug () & FC_DBG_CACHE)
-	    printf ("FcDirCacheCreateUUID %s: %s\n", uuidname, out);
-	write (fd, out, strlen (out));
-	close (fd);
-	FcAtomicReplaceOrig (atomic);
-    bail3:
-	FcAtomicUnlock (atomic);
-    bail2:
-	FcAtomicDestroy (atomic);
-
-	if (ret)
-	{
-	    /* revert mtime of the directory */
-	    times[0].tv_sec = statb.st_atime;
-	    times[1].tv_sec = statb.st_mtime;
-#ifdef HAVE_STRUCT_STAT_ST_MTIM
-	    times[0].tv_usec = statb.st_atim.tv_nsec / 1000;
-	    times[1].tv_usec = statb.st_mtim.tv_nsec / 1000;
-#else
-	    times[0].tv_usec = 0;
-	    times[1].tv_usec = 0;
-#endif
-	    if (utimes ((const  char *) target, times) != 0)
-	    {
-		fprintf (stderr, "Unable to revert mtime: %s\n", target);
-	    }
-	}
-    }
-bail1:
-    FcStrFree (uuidname);
-    FcStrFree (target);
-#endif
-
     return ret;
 }
 
-#ifndef _WIN32
-static void
-FcDirCacheReadUUID (FcChar8  *dir,
-		    FcConfig *config)
-{
-    void *u;
-    uuid_t uuid;
-    const FcChar8 *sysroot = FcConfigGetSysRoot (config);
-    FcChar8 *target;
-
-    if (sysroot)
-	target = FcStrBuildFilename (sysroot, dir, NULL);
-    else
-	target = FcStrdup (dir);
-
-    if (!FcHashTableFind (config->uuid_table, target, &u))
-    {
-	FcChar8 *uuidname = FcStrBuildFilename (target, ".uuid", NULL);
-	int fd;
-
-	if ((fd = FcOpen ((char *) uuidname, O_RDONLY)) >= 0)
-	{
-	    char suuid[37];
-
-	    memset (suuid, 0, sizeof (suuid));
-	    if (read (fd, suuid, 36) > 0)
-	    {
-		memset (uuid, 0, sizeof (uuid));
-		if (uuid_parse (suuid, uuid) == 0)
-		{
-		    if (FcDebug () & FC_DBG_CACHE)
-			printf ("FcDirCacheReadUUID %s -> %s\n", uuidname, suuid);
-		    FcHashTableAdd (config->uuid_table, target, uuid);
-		}
-	    }
-	    close (fd);
-	}
-	else
-	{
-	    if (FcDebug () & FC_DBG_CACHE)
-		printf ("FcDirCacheReadUUID Unable to read %s\n", uuidname);
-	}
-	FcStrFree (uuidname);
-    }
-    else
-	FcHashUuidFree (u);
-    FcStrFree (target);
-}
-#endif
-
 struct MD5Context {
         FcChar32 buf[4];
         FcChar32 bits[2];
@@ -273,31 +127,6 @@ FcDirCacheBasenameMD5 (const FcChar8 *dir, FcChar8 cache_base[CACHEBASE_LEN])
     return cache_base;
 }
 
-#ifndef _WIN32
-static FcChar8 *
-FcDirCacheBasenameUUID (const FcChar8 *dir, FcChar8 cache_base[CACHEBASE_LEN], FcConfig *config)
-{
-    void *u;
-    FcChar8 *target;
-    const FcChar8 *sysroot = FcConfigGetSysRoot (config);
-
-    if (sysroot)
-	target = FcStrBuildFilename (sysroot, dir, NULL);
-    else
-	target = FcStrdup (dir);
-    if (FcHashTableFind (config->uuid_table, target, &u))
-    {
-	uuid_unparse (u, (char *) cache_base);
-	strcat ((char *) cache_base, "-" FC_ARCHITECTURE FC_CACHE_SUFFIX);
-	FcHashUuidFree (u);
-	FcStrFree (target);
-	return cache_base;
-    }
-    FcStrFree (target);
-    return NULL;
-}
-#endif
-
 FcBool
 FcDirCacheUnlink (const FcChar8 *dir, FcConfig *config)
 {
@@ -307,9 +136,6 @@ FcDirCacheUnlink (const FcChar8 *dir, FcConfig *config)
     FcChar8	*cache_dir;
     const FcChar8 *sysroot = FcConfigGetSysRoot (config);
 
-#ifndef _WIN32
-    if (!FcDirCacheBasenameUUID (dir, cache_base, config))
-#endif
 	FcDirCacheBasenameMD5 (dir, cache_base);
 
     list = FcStrListCreate (config->cacheDirs);
@@ -386,9 +212,6 @@ FcDirCacheProcess (FcConfig *config, const FcChar8 *dir,
     }
     FcStrFree (d);
 
-#ifndef _WIN32
-    if (!FcDirCacheBasenameUUID (dir, cache_base, config))
-#endif
 	FcDirCacheBasenameMD5 (dir, cache_base);
 
     list = FcStrListCreate (config->cacheDirs);
@@ -1014,9 +837,6 @@ FcDirCacheLoad (const FcChar8 *dir, FcConfig *config, FcChar8 **cache_file)
 {
     FcCache *cache = NULL;
 
-#ifndef _WIN32
-    FcDirCacheReadUUID ((FcChar8 *) dir, config);
-#endif
     if (!FcDirCacheProcess (config, dir,
 			    FcDirCacheMapHelper,
 			    &cache, cache_file))
@@ -1320,9 +1140,6 @@ FcDirCacheWrite (FcCache *cache, FcConfig *config)
     if (!cache_dir)
 	return FcFalse;
 
-#ifndef _WIN32
-    if (!FcDirCacheBasenameUUID (dir, cache_base, config))
-#endif
 	FcDirCacheBasenameMD5 (dir, cache_base);
     cache_hashed = FcStrBuildFilename (cache_dir, cache_base, NULL);
     if (!cache_hashed)
@@ -1520,9 +1337,6 @@ FcDirCacheLock (const FcChar8 *dir,
     const FcChar8 *sysroot = FcConfigGetSysRoot (config);
     int fd = -1;
 
-#ifndef _WIN32
-    if (!FcDirCacheBasenameUUID (dir, cache_base, config))
-#endif
 	FcDirCacheBasenameMD5 (dir, cache_base);
     list = FcStrListCreate (config->cacheDirs);
     if (!list)
diff --git a/src/fchash.c b/src/fchash.c
index 396f452..bf87f89 100644
--- a/src/fchash.c
+++ b/src/fchash.c
@@ -20,9 +20,6 @@
  * PERFORMANCE OF THIS SOFTWARE.
  */
 #include "fcint.h"
-#ifndef _WIN32
-#include <uuid/uuid.h>
-#endif
 
 #define FC_HASH_SIZE 227
 
@@ -56,10 +53,6 @@ FcBool
 FcHashUuidCopy (const void  *src,
 		void       **dest)
 {
-#ifndef _WIN32
-    *dest = malloc (sizeof (uuid_t));
-    uuid_copy (*dest, src);
-#endif
     return FcTrue;
 }
 
diff --git a/src/fcstat.c b/src/fcstat.c
index f6e1aaa..b826fe2 100644
--- a/src/fcstat.c
+++ b/src/fcstat.c
@@ -345,6 +345,12 @@ FcStatChecksum (const FcChar8 *file, struct stat *statb)
 static int
 FcFStatFs (int fd, FcStatFS *statb)
 {
+#if 1
+  memset (statb, 0, sizeof (FcStatFS));
+  statb->is_remote_fs = FcFalse;
+  statb->is_mtime_broken = FcTrue;
+  return 0;
+#else
     const char *p = NULL;
     int ret = -1;
     FcBool flag = FcFalse;
@@ -404,6 +410,7 @@ FcFStatFs (int fd, FcStatFS *statb)
     }
 
     return ret;
+#endif
 }
 
 FcBool
